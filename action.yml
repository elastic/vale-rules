name: 'Elastic Vale Linter'
description: 'Run Vale with Elastic style guide on documentation files'
author: 'Elastic'

branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  files:
    description: 'Files or directories to lint (space-separated). If not provided, lints changed files in PR.'
    required: false
    default: ''
  reporter:
    description: 'Reviewdog reporter (github-pr-review, github-pr-check, github-check)'
    required: false
    default: 'github-pr-review'
  vale_version:
    description: 'Vale version to install (default: latest via package manager)'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Detect OS
      id: detect-os
      shell: bash
      run: |
        if [[ "$OSTYPE" == "darwin"* ]]; then
          echo "os=macos" >> $GITHUB_OUTPUT
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
          echo "os=linux" >> $GITHUB_OUTPUT
        else
          echo "os=unknown" >> $GITHUB_OUTPUT
        fi
    
    - name: Install Vale (macOS)
      if: steps.detect-os.outputs.os == 'macos'
      shell: bash
      run: |
        if ! command -v vale &> /dev/null; then
          echo "Installing Vale via Homebrew..."
          brew install vale
        else
          echo "Vale is already installed: $(vale --version)"
        fi
    
    - name: Install Vale (Linux)
      if: steps.detect-os.outputs.os == 'linux'
      shell: bash
      run: |
        if ! command -v vale &> /dev/null; then
          echo "Installing Vale via snap..."
          sudo snap install vale
        else
          echo "Vale is already installed: $(vale --version)"
        fi
    
    - name: Configure Vale with Elastic style guide
      shell: bash
      run: |
        # Create a minimal .vale.ini for this run
        # Vale will download the package and merge its .vale.ini automatically
        cat > .vale.ini.temp << 'EOF'
        StylesPath = .vale-styles
        
        Packages = https://github.com/elastic/vale-rules/releases/latest/download/elastic-vale.zip
        EOF
        
        # Sync the Elastic style package (downloads styles and merges packaged config)
        echo "Downloading Elastic style guide..."
        vale --config=.vale.ini.temp sync
        
        echo "Vale configured with Elastic style guide"
    
    - name: Get changed files
      id: changed-files
      if: inputs.files == ''
      shell: bash
      run: |
        # Only get changed files if running in a PR context
        if [ -n "${{ github.event.pull_request.base.sha }}" ]; then
          # For new commits on existing PRs, only diff against the previous commit to avoid duplicate comments
          if [ "${{ github.event.action }}" = "synchronize" ] && [ -n "${{ github.event.before }}" ]; then
            echo "Detecting files changed in latest commit..."
            git diff --name-only ${{ github.event.before }}...${{ github.event.after }} \
              | grep -E '\.(md|adoc)$' > changed_files.txt || echo "No markdown/adoc files changed"
          else
            # For opened/reopened PRs, check all PR changes
            echo "Detecting changed files in PR..."
            git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} \
              | grep -E '\.(md|adoc)$' > changed_files.txt || echo "No markdown/adoc files changed"
          fi
          
          if [ -s changed_files.txt ]; then
            echo "Found changed files:"
            cat changed_files.txt
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No markdown or adoc files changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Not running in PR context, no files to check"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Determine files to lint
      id: files-to-lint
      shell: bash
      run: |
        if [ -n "${{ inputs.files }}" ]; then
          echo "Using provided files: ${{ inputs.files }}"
          echo "${{ inputs.files }}" | tr ' ' '\n' > files_to_lint.txt
          echo "has_files=true" >> $GITHUB_OUTPUT
        elif [ "${{ steps.changed-files.outputs.has_changes }}" == "true" ]; then
          echo "Using changed files from PR"
          cp changed_files.txt files_to_lint.txt
          echo "has_files=true" >> $GITHUB_OUTPUT
        else
          echo "No files to lint"
          echo "has_files=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Install reviewdog
      if: steps.files-to-lint.outputs.has_files == 'true'
      uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest
    
    - name: Run Vale and generate reports
      id: vale-run
      if: steps.files-to-lint.outputs.has_files == 'true'
      shell: bash
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
      run: |
        echo "Running Vale on files..."
        
        # Run Vale with JSON output for parsing
        echo "{}" > vale_output.json
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "Linting: $file"
            vale --config=.vale.ini.temp --output=JSON "$file" 2>&1 >> vale_output.json || true
          fi
        done < files_to_lint.txt
        
        # Parse results and count by severity
        ERROR_COUNT=$(jq -r '[.. | objects | select(.Severity == "error")] | length' vale_output.json 2>/dev/null || echo "0")
        WARNING_COUNT=$(jq -r '[.. | objects | select(.Severity == "warning")] | length' vale_output.json 2>/dev/null || echo "0")
        SUGGESTION_COUNT=$(jq -r '[.. | objects | select(.Severity == "suggestion")] | length' vale_output.json 2>/dev/null || echo "0")
        TOTAL_COUNT=$((ERROR_COUNT + WARNING_COUNT + SUGGESTION_COUNT))
        
        echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "suggestion_count=$SUGGESTION_COUNT" >> $GITHUB_OUTPUT
        echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        
        # Generate GitHub Actions Summary
        echo "## üìù Vale Linting Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$TOTAL_COUNT" -eq 0 ]; then
          echo "‚úÖ **No issues found!** Your documentation looks great." >> $GITHUB_STEP_SUMMARY
        else
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ Errors | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° Warnings | $WARNING_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| üí° Suggestions | $SUGGESTION_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$TOTAL_COUNT** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Group issues by file
          echo "### Issues by File" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          jq -r 'to_entries | .[] | "\n#### \(.key)\n\n| Line | Severity | Message |\n|------|----------|----------|\n" + (.value | map("| \(.Line) | \(.Severity) | \(.Message) |") | join("\n"))' vale_output.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "See logs for detailed output" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*View inline annotations below for error and warning locations.*" >> $GITHUB_STEP_SUMMARY
        
        # Run Vale again with line output for reviewdog (inline annotations)
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            vale --config=.vale.ini.temp --output=line "$file" 2>&1 || true
          fi
        done < files_to_lint.txt > vale_output.txt
        
        # Send to reviewdog for inline annotations
        if [ -s vale_output.txt ]; then
          echo "Posting inline annotations via reviewdog..."
          cat vale_output.txt | \
          reviewdog -efm="%f:%l:%c:%m" \
            -name="Elastic Vale" \
            -reporter="${{ inputs.reporter }}" \
            -filter-mode="nofilter" \
            -fail-on-error="false"
        fi
        
        # Fail if there are errors
        if [ "$ERROR_COUNT" -gt 0 ]; then
          echo "‚ùå Vale found $ERROR_COUNT error(s). Please fix them before merging."
          exit 1
        elif [ "$TOTAL_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è  Vale found $WARNING_COUNT warning(s) and $SUGGESTION_COUNT suggestion(s)."
        else
          echo "‚úÖ No issues found!"
        fi
    
    - name: Post PR summary comment
      if: github.event.pull_request && steps.files-to-lint.outputs.has_files == 'true'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: vale-lint-summary
        message: |
          ## üìù Vale Linting Results
          
          ${{ steps.vale-run.outputs.total_count == '0' && '‚úÖ **No issues found!** Your documentation looks great.' || format('| Severity | Count |
          |----------|-------|
          | üî¥ Errors | {0} |
          | üü° Warnings | {1} |
          | üí° Suggestions | {2} |
          | **Total** | **{3}** |
          
          {4}
          
          [View detailed report and inline annotations](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})', steps.vale-run.outputs.error_count, steps.vale-run.outputs.warning_count, steps.vale-run.outputs.suggestion_count, steps.vale-run.outputs.total_count, steps.vale-run.outputs.error_count > '0' && '‚ùå **Action failed due to errors.** Please fix the errors before merging.' || '‚ö†Ô∏è Please review the warnings and suggestions.') }}
    
    - name: Cleanup
      if: always()
      shell: bash
      run: |
        rm -f .vale.ini.temp
        rm -f changed_files.txt
        rm -f files_to_lint.txt
        rm -f vale_output.txt
        rm -f vale_output.json
        rm -rf .vale-styles


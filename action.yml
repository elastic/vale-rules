name: 'Elastic Vale Linter'
description: 'Run Vale with Elastic style guide on documentation files'
author: 'Elastic'

branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  files:
    description: 'Files or directories to lint. See errata-ai/vale-action for format options.'
    required: false
    default: 'all'
  reporter:
    description: 'Reviewdog reporter (github-pr-review, github-pr-check, github-check)'
    required: false
    default: 'github-pr-review'
  filter_mode:
    description: 'Reviewdog filter mode (added, diff_context, file, nofilter)'
    required: false
    default: 'added'
  vale_version:
    description: 'Vale version to use (must be >= 2.16.0)'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Setup Elastic Vale package
      shell: bash
      run: |
        echo "Downloading Elastic Vale package..."
        curl -fsSL https://github.com/elastic/vale-rules/releases/latest/download/elastic-vale.zip -o elastic-vale.zip
        
        echo "Extracting package..."
        unzip -q elastic-vale.zip
        
        echo "‚úì Elastic Vale styles ready"
        ls -la .vale.ini styles/ 2>/dev/null || true
    
    - name: Run Vale linting
      id: vale-lint
      uses: errata-ai/vale-action@v2.1.1
      with:
        files: ${{ inputs.files }}
        reporter: ${{ inputs.reporter }}
        filter_mode: ${{ inputs.filter_mode }}
        fail_on_error: true
        version: ${{ inputs.vale_version }}
    
    - name: Generate summary and PR comment
      if: always()
      id: vale-summary
      shell: bash
      run: |
        # Run Vale with JSON output for summary
        vale --output=JSON ${{ inputs.files }} > vale_results.json 2>&1 || true
        
        # Parse results and count by severity
        ERROR_COUNT=$(jq -r '[.. | objects | select(.Severity == "error")] | length' vale_results.json 2>/dev/null || echo "0")
        WARNING_COUNT=$(jq -r '[.. | objects | select(.Severity == "warning")] | length' vale_results.json 2>/dev/null || echo "0")
        SUGGESTION_COUNT=$(jq -r '[.. | objects | select(.Severity == "suggestion")] | length' vale_results.json 2>/dev/null || echo "0")
        TOTAL_COUNT=$((ERROR_COUNT + WARNING_COUNT + SUGGESTION_COUNT))
        
        echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "suggestion_count=$SUGGESTION_COUNT" >> $GITHUB_OUTPUT
        echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
        
        # Generate GitHub Actions Summary
        echo "## üìù Vale Linting Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$TOTAL_COUNT" -eq 0 ]; then
          echo "‚úÖ **No issues found!** Your documentation looks great." >> $GITHUB_STEP_SUMMARY
        else
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ Errors | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° Warnings | $WARNING_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| üí° Suggestions | $SUGGESTION_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$TOTAL_COUNT** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Group issues by file
          echo "### Issues by File" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          jq -r 'to_entries | .[] | "\n#### \(.key)\n\n| Line | Severity | Message |\n|------|----------|----------|\n" + (.value | map("| \(.Line) | \(.Severity) | \(.Message) |") | join("\n"))' vale_results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "See logs for detailed output" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*View inline annotations above for issue locations.*" >> $GITHUB_STEP_SUMMARY
        
        # Generate PR comment message
        if [ "$TOTAL_COUNT" -eq 0 ]; then
          PR_MESSAGE="## üìù Vale Linting Results

‚úÖ **No issues found!** Your documentation looks great."
        else
          PR_MESSAGE="## üìù Vale Linting Results

| Severity | Count |
|----------|-------|
| üî¥ Errors | $ERROR_COUNT |
| üü° Warnings | $WARNING_COUNT |
| üí° Suggestions | $SUGGESTION_COUNT |
| **Total** | **$TOTAL_COUNT** |"
          
          if [ "$ERROR_COUNT" -gt 0 ]; then
            PR_MESSAGE="${PR_MESSAGE}

‚ùå **Action failed due to errors.** Please fix the errors before merging."
          else
            PR_MESSAGE="${PR_MESSAGE}

‚ö†Ô∏è Please review the warnings and suggestions."
          fi
          
          PR_MESSAGE="${PR_MESSAGE}

[View detailed report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        fi
        
        # Save PR message to output
        {
          echo 'pr_comment<<EOF'
          echo "$PR_MESSAGE"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
    
    - name: Post PR summary comment
      if: always() && github.event.pull_request
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: vale-lint-summary
        message: ${{ steps.vale-summary.outputs.pr_comment }}
    
    - name: Cleanup
      if: always()
      shell: bash
      run: |
        rm -f elastic-vale.zip
        rm -f vale_results.json

